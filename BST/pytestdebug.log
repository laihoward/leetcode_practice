versions pytest-6.1.1, py-1.9.0, python-3.8.5.final.0
cwd=C:\Users\User\Desktop\leetcode_practice\BST
args=('test_tree.py', '--debug', '-s')

  pytest_cmdline_main [hook]
      config: <_pytest.config.Config object at 0x000001B797E45370>
    pytest_plugin_registered [hook]
        plugin: <Session BST exitstatus=None testsfailed=0 testscollected=0>
        manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
    finish pytest_plugin_registered --> [] [hook]
    pytest_configure [hook]
        config: <_pytest.config.Config object at 0x000001B797E45370>
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001B79857ADC0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001B79857AF40>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: faulthandler [assertion]
      pytest_configure [hook]
          config: <_pytest.config.Config object at 0x000001B797E45370>
      finish pytest_configure --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x000001B79857AFD0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x000001B7985811F0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
    early skip of rewriting module: pdb [assertion]
    early skip of rewriting module: cmd [assertion]
    early skip of rewriting module: code [assertion]
    early skip of rewriting module: codeop [assertion]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000001B797E45370>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001B79857ADC0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001B79857AF40>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x000001B79857AFD0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x000001B7985811F0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_warning_recorded [hook]
          warning_message: {message : DeprecationWarning("Using or importing the ABCs from 'collections' instead of from 'collections.abc' is deprecated since Python 3.3, and in 3.9 it will stop working"), category : 'DeprecationWarning', filename : 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\pyreadline\\py3k_compat.py', lineno : 8, line : None}
          nodeid: 
          when: config
          location: None
      finish pytest_warning_recorded --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000001B798581610>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000001B7985AF580>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
    finish pytest_configure --> [] [hook]
    pytest_sessionstart [hook]
        session: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.config.Config object at 0x000001B797E45370>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.mark' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\mark\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.main' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\main.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.runner' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\runner.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.fixtures' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\fixtures.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.helpconfig' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\helpconfig.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.python' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\python.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.terminal' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\terminal.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.debugging' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\debugging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.unittest' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\unittest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.capture' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\capture.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.skipping' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\skipping.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.tmpdir' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\tmpdir.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.monkeypatch' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\monkeypatch.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.recwarn' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\recwarn.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.pastebin' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\pastebin.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.nose' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\nose.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.assertion' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\assertion\\__init__.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.junitxml' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\junitxml.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.doctest' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\doctest.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.cacheprovider' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\cacheprovider.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.freeze_support' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\freeze_support.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setuponly' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\setuponly.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.setupplan' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\setupplan.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.stepwise' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\stepwise.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.warnings' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\warnings.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.logging' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\logging.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.reports' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\reports.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <module '_pytest.faulthandler' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\faulthandler.py'>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <CaptureManager _method='no' _global_capturing=<MultiCapture out=None err=None in_=None _state='suspended' _in_suspended=False> _capture_fixture=None>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.LFPlugin object at 0x000001B79857ADC0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.cacheprovider.NFPlugin object at 0x000001B79857AF40>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.faulthandler.FaultHandlerHooks object at 0x000001B79857AFD0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.stepwise.StepwisePlugin object at 0x000001B7985811F0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.terminal.TerminalReporter object at 0x000001B798581610>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.logging.LoggingPlugin object at 0x000001B7985AF580>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_plugin_registered [hook]
          plugin: <_pytest.fixtures.FixtureManager object at 0x000001B7985CB6A0>
          manager: <_pytest.config.PytestPluginManager object at 0x000001B795D0A310>
      finish pytest_plugin_registered --> [] [hook]
      pytest_report_header [hook]
          config: <_pytest.config.Config object at 0x000001B797E45370>
          startdir: C:\Users\User\Desktop\leetcode_practice\BST
      finish pytest_report_header --> [['rootdir: C:\\Users\\User\\Desktop\\leetcode_practice\\BST'], ['using: pytest-6.1.1 pylib-1.9.0']] [hook]
    finish pytest_sessionstart --> [] [hook]
    pytest_collection [hook]
        session: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
    perform_collect <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0> ['test_tree.py'] [collection]
        pytest_collectstart [hook]
            collector: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        finish pytest_collectstart --> [] [hook]
        pytest_make_collect_report [hook]
            collector: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        processing argument (local('C:\\Users\\User\\Desktop\\leetcode_practice\\BST\\test_tree.py'), []) [collection]
            pytest_collect_file [hook]
                path: C:\Users\User\Desktop\leetcode_practice\BST\test_tree.py
                parent: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              pytest_pycollect_makemodule [hook]
                  path: C:\Users\User\Desktop\leetcode_practice\BST\test_tree.py
                  parent: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
              finish pytest_pycollect_makemodule --> <Module test_tree.py> [hook]
            finish pytest_collect_file --> [<Module test_tree.py>] [hook]
          matchnodes [<Module test_tree.py>] [] [collection]
            matchnodes finished ->  1 nodes [collection]
        finish pytest_make_collect_report --> <CollectReport '' lenresult=1 outcome='passed'> [hook]
        pytest_collectreport [hook]
            report: <CollectReport '' lenresult=1 outcome='passed'>
        finish pytest_collectreport --> [] [hook]
    genitems <Module test_tree.py> [collection]
      pytest_collectstart [hook]
          collector: <Module test_tree.py>
      finish pytest_collectstart --> [] [hook]
      pytest_make_collect_report [hook]
          collector: <Module test_tree.py>
      find_module called for: test_tree [assertion]
      matched test file (was specified on cmdline): 'C:\\Users\\User\\Desktop\\leetcode_practice\\BST\\test_tree.py' [assertion]
      found cached rewritten pyc for C:\Users\User\Desktop\leetcode_practice\BST\test_tree.py [assertion]
      early skip of rewriting module: tree [assertion]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: @py_builtins
            obj: <module 'builtins' (built-in)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: @pytest_ar
            obj: <module '_pytest.assertion.rewrite' from 'C:\\ProgramData\\Anaconda3\\lib\\site-packages\\_pytest\\assertion\\rewrite.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: logging
            obj: <module 'logging' from 'C:\\ProgramData\\Anaconda3\\lib\\logging\\__init__.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: os
            obj: <module 'os' from 'C:\\ProgramData\\Anaconda3\\lib\\os.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: Tree
            obj: <class 'tree.Tree'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: LOGGER
            obj: <Logger test_tree (WARNING)>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_insert
            obj: <function test_insert at 0x000001B7985C0B80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D50D0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_insert>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_insert2
            obj: <function test_insert2 at 0x000001B7985C0D30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5850>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_insert2>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_in_order
            obj: <function test_in_order at 0x000001B7985F18B0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5DF0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_in_order>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_in_order2
            obj: <function test_in_order2 at 0x000001B7985F1940>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5EB0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_in_order2>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_in_order_pre_order_level_order
            obj: <function test_in_order_pre_order_level_order at 0x000001B7985F19D0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5DF0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_in_order_pre_order_level_order>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_height
            obj: <function test_height at 0x000001B7985F1A60>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5EB0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_height>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: random
            obj: <module 'random' from 'C:\\ProgramData\\Anaconda3\\lib\\random.py'>
        finish pytest_pycollect_makeitem --> None [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_find
            obj: <function test_find at 0x000001B7985F1AF0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5EB0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_find>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_find2
            obj: <function test_find2 at 0x000001B7985F1B80>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5DF0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_find2>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_find_parent_croot
            obj: <function test_find_parent_croot at 0x000001B7985F1C10>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5DF0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_find_parent_croot>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_right_most_child
            obj: <function test_right_most_child at 0x000001B7985F1CA0>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5EB0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_right_most_child>] [hook]
        pytest_pycollect_makeitem [hook]
            collector: <Module test_tree.py>
            name: test_remove
            obj: <function test_remove at 0x000001B7985F1D30>
          pytest_generate_tests [hook]
              metafunc: <_pytest.python.Metafunc object at 0x000001B7985D5DF0>
          finish pytest_generate_tests --> [] [hook]
        finish pytest_pycollect_makeitem --> [<Function test_remove>] [hook]
      finish pytest_make_collect_report --> <CollectReport 'test_tree.py' lenresult=11 outcome='passed'> [hook]
    genitems <Function test_insert> [collection]
      pytest_itemcollected [hook]
          item: <Function test_insert>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_insert2> [collection]
      pytest_itemcollected [hook]
          item: <Function test_insert2>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_in_order> [collection]
      pytest_itemcollected [hook]
          item: <Function test_in_order>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_in_order2> [collection]
      pytest_itemcollected [hook]
          item: <Function test_in_order2>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_in_order_pre_order_level_order> [collection]
      pytest_itemcollected [hook]
          item: <Function test_in_order_pre_order_level_order>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_height> [collection]
      pytest_itemcollected [hook]
          item: <Function test_height>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_find> [collection]
      pytest_itemcollected [hook]
          item: <Function test_find>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_find2> [collection]
      pytest_itemcollected [hook]
          item: <Function test_find2>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_find_parent_croot> [collection]
      pytest_itemcollected [hook]
          item: <Function test_find_parent_croot>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_right_most_child> [collection]
      pytest_itemcollected [hook]
          item: <Function test_right_most_child>
      finish pytest_itemcollected --> [] [hook]
    genitems <Function test_remove> [collection]
      pytest_itemcollected [hook]
          item: <Function test_remove>
      finish pytest_itemcollected --> [] [hook]
      pytest_collectreport [hook]
          report: <CollectReport 'test_tree.py' lenresult=11 outcome='passed'>
      finish pytest_collectreport --> [] [hook]
      pytest_collection_modifyitems [hook]
          session: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
          config: <_pytest.config.Config object at 0x000001B797E45370>
          items: [<Function test_insert>, <Function test_insert2>, <Function test_in_order>, <Function test_in_order2>, <Function test_in_order_pre_order_level_order>, <Function test_height>, <Function test_find>, <Function test_find2>, <Function test_find_parent_croot>, <Function test_right_most_child>, <Function test_remove>]
      finish pytest_collection_modifyitems --> [] [hook]
      pytest_collection_finish [hook]
          session: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=0>
        pytest_report_collectionfinish [hook]
            config: <_pytest.config.Config object at 0x000001B797E45370>
            startdir: C:\Users\User\Desktop\leetcode_practice\BST
            items: [<Function test_insert>, <Function test_insert2>, <Function test_in_order>, <Function test_in_order2>, <Function test_in_order_pre_order_level_order>, <Function test_height>, <Function test_find>, <Function test_find2>, <Function test_find_parent_croot>, <Function test_right_most_child>, <Function test_remove>]
        finish pytest_report_collectionfinish --> [] [hook]
      finish pytest_collection_finish --> [] [hook]
    finish pytest_collection --> None [hook]
    pytest_runtestloop [hook]
        session: <Session BST exitstatus=<ExitCode.OK: 0> testsfailed=0 testscollected=11>
      pytest_runtest_protocol [hook]
          item: <Function test_insert>
          nextitem: <Function test_insert2>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_insert
            location: ('test_tree.py', 6, 'test_insert')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_insert>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_insert>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_insert' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_insert' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_insert' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_insert>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_insert>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_insert>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_insert' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_insert' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_insert' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_insert>
            nextitem: <Function test_insert2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_insert>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_insert' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_insert' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_insert' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_insert
            location: ('test_tree.py', 6, 'test_insert')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_insert2>
          nextitem: <Function test_in_order>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_insert2
            location: ('test_tree.py', 19, 'test_insert2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_insert2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_insert2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_insert2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_insert2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_insert2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_insert2>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_insert2>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_insert2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_insert2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_insert2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_insert2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_insert2>
            nextitem: <Function test_in_order>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_insert2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_insert2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_insert2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_insert2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_insert2
            location: ('test_tree.py', 19, 'test_insert2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_in_order>
          nextitem: <Function test_in_order2>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_in_order
            location: ('test_tree.py', 36, 'test_in_order')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_in_order>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_in_order>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_in_order>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_in_order>
            nextitem: <Function test_in_order2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_in_order
            location: ('test_tree.py', 36, 'test_in_order')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_in_order2>
          nextitem: <Function test_in_order_pre_order_level_order>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_in_order2
            location: ('test_tree.py', 46, 'test_in_order2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_in_order2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_in_order2>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_in_order2>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_in_order2>
            nextitem: <Function test_in_order_pre_order_level_order>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_in_order2
            location: ('test_tree.py', 46, 'test_in_order2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_in_order_pre_order_level_order>
          nextitem: <Function test_height>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_in_order_pre_order_level_order
            location: ('test_tree.py', 56, 'test_in_order_pre_order_level_order')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_in_order_pre_order_level_order>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order_pre_order_level_order>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_in_order_pre_order_level_order>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_in_order_pre_order_level_order>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order_pre_order_level_order>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_in_order_pre_order_level_order>
            nextitem: <Function test_height>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_in_order_pre_order_level_order>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_in_order_pre_order_level_order' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_in_order_pre_order_level_order
            location: ('test_tree.py', 56, 'test_in_order_pre_order_level_order')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_height>
          nextitem: <Function test_find>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_height
            location: ('test_tree.py', 71, 'test_height')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_height>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_height>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_height' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_height' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_height' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_height>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_height>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_height>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_height' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_height' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_height' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_height>
            nextitem: <Function test_find>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_height>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_height' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_height' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_height' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_height
            location: ('test_tree.py', 71, 'test_height')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_find>
          nextitem: <Function test_find2>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_find
            location: ('test_tree.py', 80, 'test_find')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_find>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_find>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_find>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_find>
            nextitem: <Function test_find2>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_find
            location: ('test_tree.py', 80, 'test_find')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_find2>
          nextitem: <Function test_find_parent_croot>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_find2
            location: ('test_tree.py', 98, 'test_find2')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_find2>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find2>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find2' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find2' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find2' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_find2>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_find2>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find2>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find2' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find2' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find2' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_find2>
            nextitem: <Function test_find_parent_croot>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find2>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find2' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find2' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find2' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_find2
            location: ('test_tree.py', 98, 'test_find2')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_find_parent_croot>
          nextitem: <Function test_right_most_child>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_find_parent_croot
            location: ('test_tree.py', 112, 'test_find_parent_croot')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_find_parent_croot>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find_parent_croot>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find_parent_croot' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find_parent_croot' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find_parent_croot' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_find_parent_croot>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_find_parent_croot>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find_parent_croot>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find_parent_croot' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find_parent_croot' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find_parent_croot' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_find_parent_croot>
            nextitem: <Function test_right_most_child>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_find_parent_croot>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_find_parent_croot' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_find_parent_croot' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_find_parent_croot' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_find_parent_croot
            location: ('test_tree.py', 112, 'test_find_parent_croot')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_right_most_child>
          nextitem: <Function test_remove>
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_right_most_child
            location: ('test_tree.py', 136, 'test_right_most_child')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_right_most_child>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_right_most_child>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_right_most_child' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_right_most_child' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_right_most_child' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_right_most_child>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_right_most_child>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_right_most_child>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_right_most_child' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_right_most_child' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_right_most_child' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_right_most_child>
            nextitem: <Function test_remove>
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_right_most_child>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_right_most_child' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_right_most_child' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_right_most_child' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_right_most_child
            location: ('test_tree.py', 136, 'test_right_most_child')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
      pytest_runtest_protocol [hook]
          item: <Function test_remove>
          nextitem: None
        pytest_runtest_logstart [hook]
            nodeid: test_tree.py::test_remove
            location: ('test_tree.py', 148, 'test_remove')
        finish pytest_runtest_logstart --> [] [hook]
        pytest_runtest_setup [hook]
            item: <Function test_remove>
        finish pytest_runtest_setup --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_remove>
            call: <CallInfo when='setup' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_remove' when='setup' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_remove' when='setup' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_remove' when='setup' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_call [hook]
            item: <Function test_remove>
          pytest_pyfunc_call [hook]
              pyfuncitem: <Function test_remove>
          finish pytest_pyfunc_call --> True [hook]
        finish pytest_runtest_call --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_remove>
            call: <CallInfo when='call' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_remove' when='call' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_remove' when='call' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_remove' when='call' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('passed', '.', 'PASSED') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_teardown [hook]
            item: <Function test_remove>
            nextitem: None
        finish pytest_runtest_teardown --> [] [hook]
        pytest_runtest_makereport [hook]
            item: <Function test_remove>
            call: <CallInfo when='teardown' result: []>
        finish pytest_runtest_makereport --> <TestReport 'test_tree.py::test_remove' when='teardown' outcome='passed'> [hook]
        pytest_runtest_logreport [hook]
            report: <TestReport 'test_tree.py::test_remove' when='teardown' outcome='passed'>
          pytest_report_teststatus [hook]
              report: <TestReport 'test_tree.py::test_remove' when='teardown' outcome='passed'>
              config: <_pytest.config.Config object at 0x000001B797E45370>
          finish pytest_report_teststatus --> ('', '', '') [hook]
        finish pytest_runtest_logreport --> [] [hook]
        pytest_runtest_logfinish [hook]
            nodeid: test_tree.py::test_remove
            location: ('test_tree.py', 148, 'test_remove')
        finish pytest_runtest_logfinish --> [] [hook]
      finish pytest_runtest_protocol --> True [hook]
    finish pytest_runtestloop --> True [hook]
    pytest_sessionfinish [hook]
        session: <Session BST exitstatus=0 testsfailed=0 testscollected=11>
        exitstatus: 0
      pytest_terminal_summary [hook]
          terminalreporter: <_pytest.terminal.TerminalReporter object at 0x000001B798581610>
          exitstatus: 0
          config: <_pytest.config.Config object at 0x000001B797E45370>
      finish pytest_terminal_summary --> [] [hook]
    finish pytest_sessionfinish --> [] [hook]
    pytest_unconfigure [hook]
        config: <_pytest.config.Config object at 0x000001B797E45370>
    finish pytest_unconfigure --> [] [hook]
